/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 08 14:40:45 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.csv.IOUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cH|");
      char[] charArray0 = new char[7];
      long long0 = IOUtils.copyLarge(reader0, mockPrintWriter0, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Writer writer0 = Writer.nullWriter();
      StringReader stringReader0 = new StringReader("Q=jM}!");
      char[] charArray0 = new char[3];
      long long0 = IOUtils.copyLarge(stringReader0, writer0, charArray0);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cH|");
      StringReader stringReader0 = new StringReader("cH|");
      long long0 = IOUtils.copyLarge(stringReader0, mockPrintWriter0);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      long long0 = IOUtils.copy(reader0, charBuffer0, charBuffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cH|");
      long long0 = IOUtils.copy(reader0, mockPrintWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        IOUtils.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("q+X%~J");
      // Undeclared exception!
      try { 
        IOUtils.copyLarge(stringReader0, pipedWriter0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("q+X%~J");
      char[] charArray0 = new char[3];
      try { 
        IOUtils.copyLarge(stringReader0, pipedWriter0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) null, pipedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.copyLarge(pipedReader0, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      IOUtils.copy(reader0, charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy(reader0, pipedWriter0, (CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      try { 
        IOUtils.copy(pipedReader0, bufferedWriter0, charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, pipedWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtils.copy(pipedReader0, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      IOUtils.copyLarge(reader0, stringWriter0, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Reader reader0 = Reader.nullReader();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cH|");
      long long0 = IOUtils.copyLarge(reader0, mockPrintWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cH|");
      StringReader stringReader0 = new StringReader("5c");
      long long0 = IOUtils.copy(stringReader0, mockPrintWriter0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("_,");
      try { 
        IOUtils.rethrow((Throwable) mockThrowable0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }
}
